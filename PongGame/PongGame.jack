// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/11/Pong/PongGame.jack
// (Same as projects/9/Pong/PongGame.jack)
/**
 * Represents a Pong game.
 */
class PongGame {

    static PongGame instance;
    field Array row1;
    field Array row2;
    field Array row3;

    field boolean gameStarted;

    field String p1, p2;

    field boolean exit;

    constructor PongGame new() {
        do Screen.clearScreen();
        let gameStarted = false;
        let row1 = Array.new(3);
        let row2 = Array.new(3);
        let row3 = Array.new(3);

        do draw();
        do Screen.setColor(false);
        let p1 = Keyboard.readLine("Nom du Joueur1: ");
        do Output.moveCursor(0, 0);
        do Screen.drawRectangle(0, 0, 511, 19);
        let p2 = Keyboard.readLine("Nom du Joueur2: ");

        let gameStarted = true;
	    let exit = false;

        return this;
    }

    /** Deallocates the object's memory. */
    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    /** Creates an instance of a Pong game. */
    function void newInstance() {
        let instance = PongGame.new();
        return;
    }
    
    /** Returns this Pong game. */
    function PongGame getInstance() {
        return instance;
    }

    method void draw() {
        var int i;
        do Screen.setColor(false);
        do Screen.drawRectangle(0, 0, 511, 19);

        do Screen.setColor(true);
        //Lignes
        do Screen.drawLine(0, 190, 511, 190);
        do Screen.drawLine(0, 105, 511, 105);
        do Screen.drawLine(0, 20, 511, 20);

        //Colonnes
        do Screen.drawLine(170, 20, 170, 256);
        do Screen.drawLine(340, 20, 340, 256);
        if (gameStarted) {
            do Screen.setColor(true);
            let i = 0;
        
            while (i < 3) {
                do drawRow1(i);
                do drawRow2(i);
                do drawRow3(i);
                let i = i+1;
            }
        }
        
        
        return;
    }

    method void drawRow1(int i) {

        if (row1[i] = 0) {
            do Screen.drawRectangle(80+(170*i), 60, 90 + (170*i), 65);
            return;
        } 
        else {
            do Output.moveCursor(5 + (5*i), 7);

            if (row1[i] = 1) {
                do Output.printString("X");
            } else {
                do Output.printString("O");
            }
        }
        
            
        return;
    }

    method void drawRow2(int i) {
        if (row2[i] = 0) {
            do Screen.drawRectangle(80+(170*i), 140, 90 + (170*i), 145);
            return;
        } 
        do Output.moveCursor(5 + (5*i), 14);
        if (row1[i] = 1) {
            do Output.printString("X");
        } else {
            do Output.printString("O");
        }
            
        return;
    }

    method void drawRow3(int i) {
        if (row3[i] = 0) {
            do Screen.drawRectangle(80+(170*i), 220, 90 + (170*i), 225);
            return;
        } 
        do Output.moveCursor(5 + (5*i), 21);
        if (row1[i] = 1) {
            do Output.printString("X");
        } else {
            do Output.printString("O");
        }
            
        return;
    }
    


    /** Starts the game, and handles inputs from the user that control
     *  the bat's movement direction. */
    method void run() {
        while (~exit) {
        
            // waits for a key to be pressed.
            while (~exit) {
                do draw();
            /*
                let length = Keyboard.readInt("How many numbers? ");
                do bat.move();
                do moveBall();
                do Sys.wait(50);
            }

            if (key = 130) { do bat.setDirection(1); }
	        else {
	            if (key = 132) { do bat.setDirection(2); }
		        else {
                    if (key = 140) { let exit = true; }
		        }
            }

            // Waits for the key to be released.
            while ((~(key = 0)) & (~exit)) {
                let key = Keyboard.keyPressed();
                do bat.move();
                do moveBall();
                do Sys.wait(50);
                */
            }
        }

	    if (exit) {
            do Output.moveCursor(10,27);
	        do Output.printString("Game Over");
	    }
            
        return;
    }

    /**
     * Handles ball movement, including bouncing.
     * If the ball bounces off a wall, finds its new direction.
     * If the ball bounces off the bat, increases the score by one
     * and shrinks the bat's size, to make the game more challenging. 
     */
    
}