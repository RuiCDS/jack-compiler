class TicTacToeGame {

    static TicTacToeGame instance;
    field Array row1, row2, row3;
    field boolean gameStarted, exit, end, firstRound;
    field String p1, p2;
    field int currentPlayer, round, playAgain;

    constructor TicTacToeGame new() {
        do Screen.clearScreen();

        let row1 = Array.new(3);
        let row2 = Array.new(3);
        let row3 = Array.new(3);

        do initRows();

        let gameStarted = false;
        let exit = false;
        let end = false;

        do Output.moveCursor(0, 0);
        let p1 = Keyboard.readLine("Nom du Joueur 1: ");
        let p2 = Keyboard.readLine("Nom du Joueur 2: ");

        let currentPlayer = 1;
        let round = 0;
        let playAgain = 1;
        let gameStarted = true;
        let firstRound = true;

        return this;
    }

    method void initRows() {
        var int i;
        let i = 0;
        while (i < 3) {
            let row1[i] = 0;
            let row2[i] = 0;
            let row3[i] = 0;
            let i = i + 1;
        }
        return;
    }

    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    function void newInstance() {
        let instance = TicTacToeGame.new();
        return;
    }

    function TicTacToeGame getInstance() {
        return instance;
    }

    method void display() {
        var int i;
        do Screen.clearScreen();
        do Screen.setColor(true);

        do Screen.drawLine(0, 85, 511, 85);
        do Screen.drawLine(0, 170, 511, 170);
        do Screen.drawLine(170, 0, 170, 255);
        do Screen.drawLine(340, 0, 340, 255);

        do drawRow();

        if (~end) {
            do Output.moveCursor(0, 43);
            do Output.printString("Joueur actif : ");
            if (firstRound) {
                do Output.printString(p1);
                let firstRound = false;
            } else {
                if (currentPlayer = -1) {
                    do Output.printString(p1);
                } else {
                    do Output.printString(p2);
                }
            }
        }

        return;
    }

    method void drawRow() {
        var int i, x, y;
        let i = 0;
        while (i < 3) {
            let x = 85 + ((2*i) * 85);
            let y = 42 + ((2*0) * 42);

            if (row1[i] = 1) {
                do Screen.drawCircle(x, y, 20);
            } else {
                if (row1[i] = -1) {
                    do Screen.drawRectangle(x - 20, y - 20, x + 20, y + 20);
                }
            }

            let x = 85 + ((2*i) * 85);
            let y = 42 + ((2*1) * 42);

            if (row2[i] = 1) {
                do Screen.drawCircle(x, y, 20);
            } else {
                if (row2[i] = -1) {
                    do Screen.drawRectangle(x - 20, y - 20, x + 20, y + 20);
                }
            }

            let x = 85 + ((2*i) * 85);
            let y = 42 + ((2*2) * 42);

            if (row3[i] = 1) {
                do Screen.drawCircle(x, y, 20);
            } else {
                if (row3[i] = -1) {
                    do Screen.drawRectangle(x - 20, y - 20, x + 20, y + 20);
                }
            }
            let i = i + 1;
        }

        return;
    }

    method int getRow(boolean firstTry) {
        var int row, x;
        if (firstTry) {
            let x = 0;
        } else {
            do Output.moveCursor(0, 0);
            do Output.printString("Case prise, ");
            let x = 12;
        }
        do Output.moveCursor(0, x);
        let row = Keyboard.readInt("Entrez la ligne (1-3): ");

        while ((row - 1) * (3 - row) < 0) {
            do clearAskSpace();
            do Output.moveCursor(0, 0);
            let row = Keyboard.readInt("Incorrect, entrez la ligne (1-3): ");
        }
        let row = row - 1;
        do clearAskSpace();
        return row;
    }

    method int getCol() {
        var int col;
        do Output.moveCursor(0, 0);
        let col = Keyboard.readInt("Entrez la colonne (1-3): ");

        while ((col - 1) * (3 - col) < 0) {
            do Output.moveCursor(0, 0);
            let col = Keyboard.readInt("Incorrect, entrez la colonne (1-3): ");
        }
        let col = col - 1;
        do clearAskSpace();
        return col;
    }
    method void clearAskSpace() {
        do Output.moveCursor(0, 0);
        do Output.printString("                                       ");
        return;
    }

    method boolean isPlacable(int row, int col) {
        if (row = 0) {
            if (row1[col] = 0) {
                let row1[col] = currentPlayer;
                return true;
            } else {
                return false;
            }
        } else {
            if (row = 1) {
                if (row2[col] = 0) {
                    let row2[col] = currentPlayer;
                    return true;
                } else {
                    return false;
                }
            } else {
                if (row = 2) {
                    if (row3[col] = 0) {
                        let row3[col] = currentPlayer;
                        return true;
                    } else {
                        return false;
                    }

                }

            }
        }
        return false;
    }

    method void events() {
        var int row, col;
        var boolean placable;

        let row = getRow(true);


        let col = getCol();


        let placable = isPlacable(row, col);
        while (~placable) {
            let row = getRow(false);
            let col = getCol();
            let placable = isPlacable(row, col);
        }
        let round = round + 1;
        return;
    }


    method void verifs() {
        do verifRows();
        do verifCols();
        do verifDiags();
        do verifDraw();
        return;
    }

    method void verifRows() {
        if ((row1[0] = currentPlayer) & (row1[1] = currentPlayer) & (row1[2] = currentPlayer)) {
            let end = true;
        }
        if ((row2[0] = currentPlayer) & (row2[1] = currentPlayer) & (row2[2] = currentPlayer)) {
            let end = true;
        }
        if ((row3[0] = currentPlayer) & (row3[1] = currentPlayer) & (row3[2] = currentPlayer)) {
            let end = true;
        }
        return;
    }


    method void verifCols() {
        if ((row1[0] = currentPlayer) & (row2[0] = currentPlayer) & (row3[0] = currentPlayer)) {
            let end = true;
        }
        if ((row1[1] = currentPlayer) & (row2[1] = currentPlayer) & (row3[1] = currentPlayer)) {
            let end = true;
        }
        if ((row1[2] = currentPlayer) & (row2[2] = currentPlayer) & (row3[2] = currentPlayer)) {
            let end = true;
        }
        return;
    }

    method void verifDiags() {
        if ((row1[0] = currentPlayer) & (row2[1] = currentPlayer) & (row3[2] = currentPlayer)) {
            let end = true;
        }
        if ((row3[0] = currentPlayer) & (row2[1] = currentPlayer) & (row1[2] = currentPlayer)) {
            let end = true;
        }
        return;
    }


    method void verifDraw() {
        if (round = 9) {
            if (end = false) {
                let currentPlayer = 0;
                let end = true;
            }
        }
        return;
    }

    method void run() {
        var int winnerLength;
        do display();
        while (~exit) {
            while (~end) {
                do events();
                do verifs();
                do display();
                let currentPlayer = currentPlayer * -1;
            }

            do Screen.clearScreen();
            do Output.moveCursor(0, 1);
            do Output.printString("Fin de la partie! ");
            do Output.moveCursor(5, 1);
            if (currentPlayer = 0) {
                do Output.printString("Aucun gagnant...");
            } else {
                if (currentPlayer = 1) {
                    do Output.printString(p2);
                    let winnerLength = p2.length();
                } else {
                    do Output.printString(p1);
                    let winnerLength = p1.length();
                }
                let winnerLength = winnerLength + 1;
                do Output.moveCursor(5, winnerLength);
                do Output.printString(" remporte la partie!");
            }

            do Output.moveCursor(10, 1);
            do Keyboard.readLine("Appuyez sur 'Entrer' pour afficher la partie.");
            do display();
            do Output.moveCursor(0, 1);
            do Keyboard.readLine("Appuyez sur 'Entrer' pour terminer la partie.");
            let exit = true;
            do Screen.clearScreen();
        }
        return;
    }

}